#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TeammatesFinder - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–ø—É—Å–∫–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É lt
"""

import subprocess
import sys
import os
import time
import signal
import re
import threading

class FinalLauncher:
    def __init__(self):
        self.backend_process = None
        self.tunnel_process = None
        self.bot_process = None
        self.tunnel_url = None
        self.is_running = False
        
    def start_backend(self):
        """–ó–∞–ø—É—Å–∫ Backend"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Backend...")
        
        try:
            self.backend_process = subprocess.Popen([
                sys.executable, 'backend/app.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            time.sleep(3)
            
            if self.backend_process.poll() is None:
                print("‚úÖ Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
                return True
            else:
                stdout, stderr = self.backend_process.communicate()
                print(f"‚ùå –û—à–∏–±–∫–∞ Backend: {stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Backend: {e}")
            return False
            
    def start_tunnel(self):
        """–ó–∞–ø—É—Å–∫ LocalTunnel"""
        print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º LocalTunnel...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É lt –∫–æ—Ç–æ—Ä–∞—è —É —Ç–µ–±—è —Ä–∞–±–æ—Ç–∞–µ—Ç
            self.tunnel_process = subprocess.Popen([
                'lt', '--port', '5000'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            print("‚è≥ –û–∂–∏–¥–∞–µ–º URL —Ç—É–Ω–Ω–µ–ª—è...")
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ —Ç—É–Ω–Ω–µ–ª—è
            def read_tunnel_output():
                while True:
                    line = self.tunnel_process.stdout.readline()
                    if line:
                        line = line.strip()
                        print(f"üìù Tunnel: {line}")
                        
                        # –ò—â–µ–º URL –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                        url_patterns = [
                            r'https://[^\s]+\.loca\.lt',
                            r'your url is: (https://[^\s]+)',
                            r'https://[a-zA-Z0-9-]+\.loca\.lt'
                        ]
                        
                        for pattern in url_patterns:
                            match = re.search(pattern, line)
                            if match:
                                if 'your url is:' in line:
                                    self.tunnel_url = match.group(1)
                                else:
                                    self.tunnel_url = match.group(0)
                                print(f"‚úÖ –¢—É–Ω–Ω–µ–ª—å –≥–æ—Ç–æ–≤: {self.tunnel_url}")
                                return
                                
                    if self.tunnel_process.poll() is not None:
                        stderr = self.tunnel_process.stderr.read()
                        if stderr:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—É–Ω–Ω–µ–ª—è: {stderr}")
                        return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            tunnel_thread = threading.Thread(target=read_tunnel_output, daemon=True)
            tunnel_thread.start()
            
            # –ñ–¥–µ–º URL –º–∞–∫—Å–∏–º—É–º 20 —Å–µ–∫—É–Ω–¥
            start_time = time.time()
            while time.time() - start_time < 20:
                if self.tunnel_url:
                    return True
                time.sleep(0.5)
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ç—É–Ω–Ω–µ–ª—è –∑–∞ 20 —Å–µ–∫—É–Ω–¥")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—É–Ω–Ω–µ–ª—è: {e}")
            return False
            
    def update_env(self):
        """–û–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª"""
        if not self.tunnel_url:
            return False
            
        try:
            env_lines = []
            if os.path.exists('.env'):
                with open('.env', 'r', encoding='utf-8') as f:
                    env_lines = f.readlines()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º WEBAPP_URL
            updated = False
            for i, line in enumerate(env_lines):
                if line.startswith('WEBAPP_URL='):
                    env_lines[i] = f'WEBAPP_URL={self.tunnel_url}\n'
                    updated = True
                    break
            
            if not updated:
                env_lines.append(f'WEBAPP_URL={self.tunnel_url}\n')
            
            with open('.env', 'w', encoding='utf-8') as f:
                f.writelines(env_lines)
            
            print(f"‚úÖ .env –æ–±–Ω–æ–≤–ª–µ–Ω: WEBAPP_URL={self.tunnel_url}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")
            return False
            
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        
        try:
            self.bot_process = subprocess.Popen([
                sys.executable, 'bot/basic_bot.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            time.sleep(2)
            
            if self.bot_process.poll() is None:
                print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
                return True
            else:
                stdout, stderr = self.bot_process.communicate()
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            return False
            
    def show_instructions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        print(f"""
üéâ –í–°–ï –°–ï–†–í–ò–°–´ –ó–ê–ü–£–©–ï–ù–´!

üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï MINI APP:

1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π URL —Ç—É–Ω–Ω–µ–ª—è:
   {self.tunnel_url}

2Ô∏è‚É£ –ò–¥–∏ –∫ @BotFather –≤ Telegram

3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:
   /setmenubutton

4Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞

5Ô∏è‚É£ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:
   TeammatesFinder

6Ô∏è‚É£ –í–≤–µ–¥–∏ URL:
   {self.tunnel_url}

7Ô∏è‚É£ –ù–∞–π–¥–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram

8Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:
   /start

9Ô∏è‚É£ –í–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "TeammatesFinder"

üîü –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - Mini App –æ—Ç–∫—Ä–æ–µ—Ç—Å—è!

üåê –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:5000
üåç –ü—É–±–ª–∏—á–Ω—ã–π URL: {self.tunnel_url}
ü§ñ Telegram Bot: –†–∞–±–æ—Ç–∞–µ—Ç

‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–ï –ó–ê–ö–†–´–í–ê–ô —ç—Ç–æ –æ–∫–Ω–æ - –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è!

–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏ Ctrl+C
""")
            
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
        
        processes = [
            (self.backend_process, "Backend"),
            (self.tunnel_process, "LocalTunnel"), 
            (self.bot_process, "Bot")
        ]
        
        for process, name in processes:
            if process:
                try:
                    process.terminate()
                    process.wait(timeout=3)
                    print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    try:
                        process.kill()
                        print(f"üî® {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    except:
                        pass
                    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Ctrl+C"""
        self.stop_all()
        sys.exit(0)
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ"""
        print("""
üéÆ TeammatesFinder - –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
====================================
Backend + LocalTunnel + Telegram Bot
====================================
""")
        
        signal.signal(signal.SIGINT, self.signal_handler)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
        if not os.path.exists('.env'):
            print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN")
            return False
        
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
        
        # 1. –ó–∞–ø—É—Å–∫–∞–µ–º Backend
        if not self.start_backend():
            return False
            
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
        if not self.start_tunnel():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å")
            self.stop_all()
            return False
            
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º .env
        if not self.update_env():
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å .env, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        if not self.start_bot():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            self.stop_all()
            return False
            
        # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.show_instructions()
        
        self.is_running = True
        
        # –ñ–¥–µ–º –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            while self.is_running:
                try:
                    user_input = input("\n–ù–∞–∂–º–∏ Enter –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ")
                    if user_input.lower() in ['—Å—Ç–∞—Ç—É—Å', 'status', 's']:
                        self.show_instructions()
                except EOFError:
                    break
                except KeyboardInterrupt:
                    break
                    
        except KeyboardInterrupt:
            pass
            
        self.stop_all()
        print("\nüëã TeammatesFinder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üéÆ")
        return True

def main():
    launcher = FinalLauncher()
    launcher.run()

if __name__ == '__main__':
    main()
