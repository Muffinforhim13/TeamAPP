# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏

from games import GAMES_CONFIG, get_game_config, get_game_ranks, get_game_roles
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

def create_games_keyboard(selected_games=None, callback_prefix="game"):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä"""
    if selected_games is None:
        selected_games = []
    
    keyboard = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–≥—Ä—ã —Å —ç–º–æ–¥–∑–∏
    for game_name, config in GAMES_CONFIG.items():
        emoji = "‚úÖ " if game_name in selected_games else ""
        display_name = f"{emoji}{config['emoji']} {game_name}"
        keyboard.append([InlineKeyboardButton(
            display_name, 
            callback_data=f"{callback_prefix}_{game_name}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"{callback_prefix}_done")])
    
    return InlineKeyboardMarkup(keyboard)

def create_ranks_keyboard(game_name, callback_prefix="rank"):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–Ω–≥–∞ –≤ –∏–≥—Ä–µ"""
    config = get_game_config(game_name)
    if not config:
        return None
    
    ranks = config.get('ranks', [])
    keyboard = []
    
    for rank in ranks:
        keyboard.append([InlineKeyboardButton(
            rank, 
            callback_data=f"{callback_prefix}_{game_name}_{rank}"
        )])
    
    return InlineKeyboardMarkup(keyboard)

def create_roles_keyboard(game_name, callback_prefix="role"):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –≤ –∏–≥—Ä–µ"""
    config = get_game_config(game_name)
    if not config:
        return None
    
    roles = config.get('roles', [])
    keyboard = []
    
    for role in roles:
        keyboard.append([InlineKeyboardButton(
            role, 
            callback_data=f"{callback_prefix}_{game_name}_{role}"
        )])
    
    return InlineKeyboardMarkup(keyboard)

def format_player_profile_text(profile_data, include_contacts=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞"""
    import json
    
    (user_id, display_name, age_group, bio, avatar_url, preferred_games, 
     skill_levels, play_times, discord_tag, steam_profile, other_contacts, 
     looking_for, language, is_active, created_at, updated_at) = profile_data
    
    # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
    games_list = json.loads(preferred_games) if preferred_games else []
    skills_dict = json.loads(skill_levels) if skill_levels else {}
    times_list = json.loads(play_times) if play_times else []
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã —Å —ç–º–æ–¥–∑–∏
    games_text = []
    for game in games_list:
        config = get_game_config(game)
        emoji = config['emoji'] if config else 'üéÆ'
        skill = skills_dict.get(game, '–ù–µ —É–∫–∞–∑–∞–Ω')
        games_text.append(f"{emoji} {game} ({skill})")
    
    profile_text = f"""
üéÆ <b>{display_name}</b>
üë• –í–æ–∑—Ä–∞—Å—Ç: {age_group} | üéØ –ò—â–µ—Ç: {looking_for}

üìù <b>–û —Å–µ–±–µ:</b>
{bio}

üéÆ <b>–ò–≥—Ä—ã –∏ —É—Ä–æ–≤–µ–Ω—å:</b>
{chr(10).join(games_text) if games_text else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üïê <b>–ò–≥—Ä–∞–µ—Ç:</b> {', '.join(times_list) if times_list else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if include_contacts:
        profile_text += f"""
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
Discord: {discord_tag or '–ù–µ —É–∫–∞–∑–∞–Ω'}
Steam: {steam_profile or '–ù–µ —É–∫–∞–∑–∞–Ω'}
"""
    
    return profile_text

def get_game_specific_questions(game_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–≥—Ä—ã"""
    config = get_game_config(game_name)
    if not config:
        return []
    
    questions = []
    
    # –í–æ–ø—Ä–æ—Å –æ —Ä–∞–Ω–≥–µ
    if 'ranks' in config:
        questions.append({
            'type': 'rank',
            'question': f"–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–∞–Ω–≥ –≤ {config['display_name']}?",
            'options': config['ranks']
        })
    
    # –í–æ–ø—Ä–æ—Å –æ —Ä–æ–ª–∏
    if 'roles' in config:
        questions.append({
            'type': 'role', 
            'question': f"–ö–∞–∫—É—é —Ä–æ–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –≤ {config['display_name']}?",
            'options': config['roles']
        })
    
    # –í–æ–ø—Ä–æ—Å –æ —Å–µ—Ä–≤–µ—Ä–µ
    if 'servers' in config:
        questions.append({
            'type': 'server',
            'question': f"–ù–∞ –∫–∞–∫–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∏–≥—Ä–∞–µ—à—å –≤ {config['display_name']}?", 
            'options': config['servers']
        })
    
    return questions

def get_matching_score(user_profile, target_profile):
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–≤—É—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (0-100)"""
    import json
    
    score = 0
    max_score = 0
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
    user_games = json.loads(user_profile[5]) if user_profile[5] else []
    target_games = json.loads(target_profile[5]) if target_profile[5] else []
    
    user_times = json.loads(user_profile[7]) if user_profile[7] else []
    target_times = json.loads(target_profile[7]) if target_profile[7] else []
    
    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–≥—Ä (40% –≤–µ—Å–∞)
    common_games = set(user_games) & set(target_games)
    if user_games and target_games:
        game_score = len(common_games) / max(len(user_games), len(target_games)) * 40
        score += game_score
    max_score += 40
    
    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã (30% –≤–µ—Å–∞)
    common_times = set(user_times) & set(target_times)
    if user_times and target_times:
        time_score = len(common_times) / max(len(user_times), len(target_times)) * 30
        score += time_score
    max_score += 30
    
    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã (20% –≤–µ—Å–∞)
    if user_profile[2] == target_profile[2]:  # age_group
        score += 20
    max_score += 20
    
    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ–∏—Å–∫–∞ (10% –≤–µ—Å–∞)
    if user_profile[11] == target_profile[11]:  # looking_for
        score += 10
    max_score += 10
    
    return int(score / max_score * 100) if max_score > 0 else 0

def suggest_profile_improvements(profile_data):
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    import json
    
    suggestions = []
    
    (user_id, display_name, age_group, bio, avatar_url, preferred_games, 
     skill_levels, play_times, discord_tag, steam_profile, other_contacts, 
     looking_for, language, is_active, created_at, updated_at) = profile_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
    if not bio or len(bio) < 20:
        suggestions.append("üìù –î–æ–±–∞–≤—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ")
    
    if not preferred_games or len(json.loads(preferred_games)) < 2:
        suggestions.append("üéÆ –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∏–≥—Ä –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    
    if not discord_tag and not steam_profile:
        suggestions.append("üìû –î–æ–±–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (Discord/Steam)")
    
    if not play_times or len(json.loads(play_times)) < 2:
        suggestions.append("üïê –£–∫–∞–∂–∏ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞–µ—à—å")
    
    # –ò–≥—Ä–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    games_list = json.loads(preferred_games) if preferred_games else []
    for game in games_list:
        config = get_game_config(game)
        if config and 'profile_tips' in config:
            suggestions.extend([f"üí° {tip}" for tip in config['profile_tips'][:2]])
    
    return suggestions[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Å–æ–≤–µ—Ç–æ–≤

